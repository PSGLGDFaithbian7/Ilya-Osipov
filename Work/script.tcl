# Auto-generated by Tcl Script
# Generated at 2025-09-12 13:51:35

######### Set Library (for dc_shell -t) ###########
remove_design -all
set_host_options -max_cores 16
set_svf  ../output/TOP_log2_20250912_1351.svf

set_app_var search_path "/home/yuhaoxie/logpe2/lib /home/yuhaoxie/logpe2/rtl /NAS/cad/synopsys/syn-S-2021.06-SP2/libraries/syn /NAS/cad/synopsys/syn-S-2021.06-SP2/dw/syn_ver /NAS/cad/synopsys/syn-S-2021.06-SP2/dw /NAS/cad/synopsys/syn-S-2021.06-SP2/minpower"
set_app_var target_library "/home/yuhaoxie/logpe2/lib/tcbn65lpwc_ccs.db"
set_app_var link_library "* /home/yuhaoxie/logpe2/lib/tcbn65lpwc_ccs.db /home/yuhaoxie/logpe2/lib/tpan65lpnv2od3wc.db dw_foundation.sldb"
set_app_var synthetic_library "dw_foundation.sldb"
set_app_var synlib_wait_for_design_license [list "DesignWare-Foundation"]
# Top module: TOP_log2

######### Read Design (for dc_shell -t) ###########
define_design_lib WORK -path ./work

analyze -format sverilog   /home/yuhaoxie/logpe2/rtl/log2_pe/Top_log2.v
analyze -format sverilog   /home/yuhaoxie/logpe2/rtl/log2_pe/log2.v

elaborate TOP_log2
current_design TOP_log2
link
uniquify -force

if [catch {redirect ../report/report.check_rtl {check_design}} cd_status] {
    puts "Check Design Error: $cd_status"
    exit
} else {
    puts "Check Design Pass!"
}


# ----------- Use for MultiVoltage Design -----------
# set auto_insert_level_shifters_on_clocks all
# set auto_insert_level_shifters_on_nets all
#--------area power suggest dont---------
# set_dont_use [get_lib_cells */LAP2UM]

write_file -format ddc -hierarchy -output ../output/TOP_log2_20250912_1351_link.ddc
######## Outside CLOCK (top port) ########
remove_driving_cell [get_ports clk]
set_drive 0 [get_ports clk]
create_clock -name clk -period 4 -waveform [list 0 2] [get_ports clk]
set_ideal_network -no_propagate [get_ports clk]
######## Uncertainty (split setup/hold) ########
set_clock_uncertainty -setup 0.2 [get_clocks clk]
set_clock_uncertainty -hold  0.05  [get_clocks clk]
######## Source & Network Latency (min/max) ########
set_clock_latency -source -min 0.08 [get_clocks clk]
set_clock_latency -source -max 0.4 [get_clocks clk]
set_clock_latency -min 0.08 [get_clocks clk]
set_clock_latency -max 0.4 [get_clocks clk]
######## Clock Transition (min/max) ########
set_clock_transition -min 0.04 [get_clocks clk]
set_clock_transition -max 0.08 [get_clocks clk]
######## IO Timing Examples (fill real ports & uncomment) ########
# set_input_delay  -max 1.6 -min 0.0  -clock [get_clocks clk] [get_ports {<in_ports_here>} ]
# set_output_delay -max 1.6 -min 0.0 -clock [get_clocks clk] [get_ports {<out_ports_here>} ]

# 生成时间: 20250912_1351
# 顶层模块: TOP_log2
# 最差条件: WCCOM
# 库(显示名): tcbn65lpwc_ccs

set_units -time ns -capacitance pF

##### I/O 延迟与端口约束 #####
###### 设置 I/O （行:4）
set_input_delay 2 -max -clock [get_clocks clk] [get_ports A_in]
set_input_delay 0 -min -clock [get_clocks clk] [get_ports A_in]

###### 设置 I/O （行:5）
set_input_delay 2 -max -clock [get_clocks clk] [get_ports B_in]
set_input_delay 0 -min -clock [get_clocks clk] [get_ports B_in]

###### 设置 I/O （行:6）
set_output_delay 0.8 -max -clock [get_clocks clk] [get_ports out]
set_output_delay 0 -min -clock [get_clocks clk] [get_ports out]


######## 环境约束 ########

# 输出负载 (pF)
set_load 5 [all_outputs]

# 高扇出建模 (Synopsys DC)
set_app_var high_fanout_net_threshold 60
set_app_var high_fanout_net_pin_capacitance 0.01

# 线负载模型选择
set_wire_load_mode "segmented"
set_wire_load_selection "WireAreaLowkCon"

# 示例（按需启用）：
# set_drive 0.1125 [all_inputs]        ;# ~ LVCMOS18 16mA => 0.1125 kΩ
# set_input_transition 2 [all_inputs]   ;# 输入上升/下降沿 (ns)，按实际修改

######### Set Reset (for dc_shell -t) ###########
set_dont_touch_network 				[get_ports rst_n]
set_false_path -from   				[get_ports rst_n]
set_ideal_network -no_propagate     [get_ports rst_n]
set_drive 0            				[get_ports rst_n]

#============================================================================#
#                                Synthesize                                   #
#============================================================================#
# Prevent assignment statements in the Verilog netlist.
set_fix_multiple_port_nets -feedthrough [get_designs *]
set_fix_multiple_port_nets -all -buffer_constants [get_designs *]

# Power optimization settings
set_leakage_optimization true
set_dynamic_optimization true

# Area constraint (0 means optimize for timing)
set_max_area 0
set_max_area_percentage 0

# Structuring and mapping effort
set_structure true -timing true -boolean false
# Set clock gating style BEFORE compile (library likely lacks ICG cells)
# Use latch-based gating to avoid PWR-191
set_clock_gating_style -sequential_cell latch

# Final check before compiling
if [catch {redirect ../report/report.check_beforecompile {check_design}} cd_status] {
    puts "Check Design Error before compile: $cd_status"
    exit
} else {
    puts "Check Design Pass before compile!"
}

set top_module [get_object_name [current_design]]

# ---------------- Compile (DW enabled + capture log) ----------------

set DATE [clock format [clock seconds] -format "%Y%m%d_%H%M%S"]

# Audit current library settings
redirect -file ../report/${top_module}_${DATE}_env.libs.rpt {
  echo "synthetic_library = [get_app_var synthetic_library]"
  echo "link_library      = [get_app_var link_library]"
  echo "search_path       = [get_app_var search_path]"
}

# Real compile with robust error capture
set rc [catch {
  redirect -file ../report/${top_module}_${DATE}_compile_ultra.log {
    compile_ultra -no_autoungroup -no_seq_output_inversion -gate_clock
  }
} comp_err]
if {$rc} {
  puts "Compile failed! See compile log. Error: $comp_err"
  exit 1
}

# Post-compile sanity checks
redirect -file ../report/${top_module}_${DATE}_post_checks.rpt {
  check_design
  check_timing
}


# ---------------- Conservative pre-CTS IO transitions ----------------

# Apply input transition only to non-ideal inputs (exclude clk/rst_n)
set nonideal_inputs [remove_from_collection [all_inputs] [list [get_ports clk] [get_ports rst_n]]]
if {[sizeof_collection $nonideal_inputs] > 0} {
  set_input_transition 0.5 $nonideal_inputs
}

# Optional frequency scaling clock
if {![info exists CLOCK_PERIOD]} { set CLOCK_PERIOD 10.0 }
set clks [get_clocks *]
if {[sizeof_collection $clks] == 0} {
  puts "No clocks found! Cannot apply frequency scaling."
} else {
  # Create a scaled clock with a new name to avoid overriding existing one
  create_clock -name clk_scaled -period [expr ${CLOCK_PERIOD} * 0.85] [get_ports [lindex $clks 0]]
}


# ===================== Power Analysis — Enhanced =====================

# If the POWER_PROFILE environment variable is set to "basic", revert to basic analysis; otherwise, perform enhanced analysis.
set use_enhanced 1
if {[info exists ::env(POWER_PROFILE)]} {
  if {$::env(POWER_PROFILE) eq "basic"} { set use_enhanced 0 }
}

set ACTIVITY_DIR          ../activity
set SAIF_FILE             "$ACTIVITY_DIR/${top_module}.saif"
set VCD_FILE              "$ACTIVITY_DIR/${top_module}.vcd"
set TOP_INSTANCE          $top_module

# Default to high effort
set POWER_ANALYSIS_EFFORT   high
# Initial unit is toggles per cycle; switch to per second if SAIF/VCD is read
catch { set_power_analysis_options -toggle_rate_unit toggles_per_cycle } ;# FIX: avoid unknown command in DC

# Heuristic values (used only when no SAIF/VCD is available)
set DATA_STATIC_PROB        0.5
set DATA_TOGGLE_PER_CYCLE   0.20
set RST_TOGGLE_PER_CYCLE    0.01
set QPIN_TOGGLE_PER_CYCLE   0.10
set OUT_TOGGLE_PER_CYCLE    0.10

proc _file_exists {f} {expr {[string length $f]>0 && [file exists $f]}}

# Uniformly reset activity information
catch { reset_switching_activity [current_design] } ;# FIX: avoid CMD-036 on object_list

if {$use_enhanced} {
  if { [_file_exists $SAIF_FILE] || [_file_exists $VCD_FILE] } {
      # Read external waveform: switch unit to toggles per second
      catch { set_power_analysis_options -toggle_rate_unit toggles_per_second } ;# FIX: avoid unknown command in DC
      if { [_file_exists $SAIF_FILE] } {
          read_saif -input $SAIF_FILE -instance $TOP_INSTANCE -verbose
      } elseif { [_file_exists $VCD_FILE] } {
          set _tmp ../report/_vcd2saif.saif
          if { ![catch {sh vcd2saif -input $VCD_FILE -output $_tmp -instance $TOP_INSTANCE}] } {
              read_saif -input $_tmp -instance $TOP_INSTANCE -verbose
              file delete $_tmp
          } else {
              puts "WARN: vcd2saif failed; fall back to vectorless heuristics"
          }
      }
  } else {
      puts "INFO: No SAIF/VCD found — using vectorless heuristics"
      # Clock: 1 toggle/cycle
      set clk_ports [get_attribute [get_clocks *] sources]
      if {[sizeof_collection $clk_ports] > 0} {
          set_switching_activity -static_probability 0.5 -toggle_rate 1.0 $clk_ports
      }
      # Reset: very low toggle rate
      if {[sizeof_collection [get_ports rst_n]] > 0} {
          set_switching_activity -static_probability 1.0 -toggle_rate $RST_TOGGLE_PER_CYCLE [get_ports rst_n]
      }
      # Data inputs
      set data_in [remove_from_collection [all_inputs] [list $clk_ports [get_ports rst_n]]]
      if {[sizeof_collection $data_in] > 0} {
          set_switching_activity -static_probability $DATA_STATIC_PROB -toggle_rate $DATA_TOGGLE_PER_CYCLE $data_in
      }
      # Register Q pins
      set qpins [get_pins -of_objects [all_registers]] ;# FIX: replace unsupported -q_pins
      if {[sizeof_collection $qpins] > 0} {
          set_switching_activity -static_probability 0.5 -toggle_rate $QPIN_TOGGLE_PER_CYCLE $qpins
      }
      # Top-level outputs
      if {[sizeof_collection [all_outputs]] > 0} {
          set_switching_activity -static_probability 0.5 -toggle_rate $OUT_TOGGLE_PER_CYCLE [all_outputs]
      }
  }

  # High-effort power analysis and reporting
  redirect -file ../report/${top_module}_${DATE}_power_summary.rpt {
      report_power -hier -analysis_effort $POWER_ANALYSIS_EFFORT -nosplit
  }
  catch { redirect -file ../report/${top_module}_${DATE}_switching_activity_summary.rpt {
      report_switching_activity -hierarchy -summary -nosplit
  }}
} else {
  # BASIC: Run only a basic report for compatibility
  redirect -file ../report/${top_module}_${DATE}_power_summary_basic.rpt {
      report_power -hier -analysis_effort low -nosplit
  }
}


# =================== End of Enhanced Power Analysis ===================

puts "
INFO: Synthesis and Power Analysis Script finished."

# ---------------- Multi-Voltage Checks ----------------
redirect -file ../report/TOP_log2_20250912_1351_check_mv.rpt          { check_mv_design }
redirect -file ../report/TOP_log2_20250912_1351_check_mv_verbose.rpt  { check_mv_design -verbose }

# ---------------- Reports (QoR/Area/Power/CG) ----------------
file mkdir ../report
# 已于上方生成 power_summary，这里保留一份常规合集
redirect -file ../report/TOP_log2_20250912_1351_report.qor             { report_qor -nosplit }
redirect -file ../report/TOP_log2_20250912_1351_report.area            { report_area -hierarchy -nosplit }
redirect -file ../report/TOP_log2_20250912_1351_report.power           { report_power -hierarchy -analysis_effort high -nosplit }
redirect -file ../report/TOP_log2_20250912_1351_report.clock_gating    { report_clock_gating -structure -verbose -nosplit }

# ---------------- Outputs (Netlist/SDC/SDF/Parasitics) ----------------
change_names -rules sverilog -hierarchy
write      -format verilog -hierarchy -output ../output/TOP_log2_20250912_1351.v
write_sdc  ../output/TOP_log2_20250912_1351.sdc
write      -format ddc     -hierarchy -output ../output/TOP_log2_20250912_1351_compile.ddc
write_sdf  ../output/TOP_log2_20250912_1351.sdf

# Parasitic (non-signoff)
set _rc_out ../output/TOP_log2_20250912_1351.rc
if {1} {
  puts "WARN: write_parasitics reduced failed: $wp_err"
  if {1} {
    puts "ERROR: write_parasitics failed (distributed): $wp_err2"
  } else {
    puts "INFO: Parasitics written in distributed format: $_rc_out"
  }
} else {
  puts "INFO: Parasitics written in reduced format: $_rc_out"
}

# Close SVF
set_svf -off

# Quick summary bundle
redirect -file ../report/TOP_log2_20250912_1351_area_recovery.log {
  report_qor -nosplit
  report_area -hierarchy -nosplit
  report_power -hierarchy -analysis_effort high -nosplit
}

puts "DONE. Netlist/SDC/SDF/RC and reports are under ../output and ../report."